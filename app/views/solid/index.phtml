



  <div class="card bg-dark text-white">
    <img src="img/solid.jpg" class="card-img" alt="...">
  </div>
  <br>
  <h1 style="text-align: center;">Desarrollo de Sistemas</h1>

  <br>

  <div class="sol container">
    <div class="card mb-3">
      <div class="row no-gutters">
        <div class="col-md-4">
          <img src="img/s.jpg" class="card-img" alt="...">
        </div>
        <div class="col-md-8">
          <div class="card-body">
            <h5 class="card-title">Single Responsibility Principle (SRP)</h5>
            <p class="card-text">"Una clase debe tener una, y solo una, razón para cambiar" <br> Según este principio “una clase
              debería tener una, y solo una, razón para cambiar”. Es esto, precisamente, “razón para cambiar”, lo
              que Robert C. Martin identifica como “responsabilidad”.</p>
            <div class="col-md-8">
              <img src="img/responsabilidadunica.png" class="card-img" alt="...">
            </div>
          </div>
        </div>
      </div>
    </div>

    <div class="card mb-3">
      <div class="row no-gutters">
        <div class="col-md-4">
          <img src="img/o.jpg" class="card-img" alt="...">
        </div>
        <div class="col-md-8">
          <div class="card-body">
            <h5 class="card-title">Open/Closed Principle (OCP)</h5>
            <p class="card-text">"Debería poder extender el comportamiento de una clase, sin modificarlo" <br> El código debería
              estar abierto para extenderlo y para añadirle nuevas funcionalidades, pero en cambio debería estar cerrado
              a modificaciones, salvo las modificaciones que se deban realizar si se encuentra algún error.</p>
            <div class="col-md-8">
              <img src="img/abiertocerrado.png" class="card-img" alt="...">
            </div>
          </div>
        </div>
      </div>
    </div>

    <div class="card mb-3">
      <div class="row no-gutters">
        <div class="col-md-4">
          <img src="img/l.jpg" class="card-img" alt="...">
        </div>
        <div class="col-md-8">
          <div class="card-body">
            <h5 class="card-title">Liskov Substitution Principle (LSP)</h5>
            <p class="card-text">"Las clases derivadas deben ser sustituibles por sus clases base" <br> La L de SOLID alude al apellido
              de quien lo creó, Barbara Liskov, y dice que “las clases derivadas deben poder sustituirse por sus clases base”.
              <br>
              Esto significa que los objetos deben poder ser reemplazados por instancias de sus subtipos sin alterar el correcto
              funcionamiento del sistema o lo que es lo mismo: si en un programa utilizamos cierta clase, deberíamos poder usar
              cualquiera de sus subclases sin interferir en la funcionalidad del programa.
            </p>
            <div class="col-md-8">
              <img src="img/susticicion.png" class="card-img" alt="...">
            </div>
          </div>
        </div>
      </div>
    </div>

    <div class="card mb-3">
      <div class="row no-gutters">
        <div class="col-md-4">
          <img src="img/i.jpg" class="card-img" alt="...">
        </div>
        <div class="col-md-8">
          <div class="card-body">
            <h5 class="card-title">Interface Segregation Principle (ISP)</h5>
            <p class="card-text">"Cree interfaces detalladas que sean específicas del cliente" <br> En el cuarto principio de
              SOLID, el tío Bob sugiere: “Haz interfaces que sean específicas para un tipo de cliente”, es decir, para
              una finalidad concreta y que tengan responsabilidades mas no se hacer interfaces grandes.</p>
            <div class="col-md-8">
              <img src="img/segregacion.png" class="card-img" alt="...">
            </div>
          </div>
        </div>
      </div>
    </div>

    <div class="card mb-3">
      <div class="row no-gutters">
        <div class="col-md-4">
          <img src="img/d.jpg" class="card-img" alt="...">
        </div>
        <div class="col-md-8">
          <div class="card-body">
            <h5 class="card-title">Dependency Inversion Principle (DIP)</h5>
            <p class="card-text">"Dependen de abstracciones, no de concreciones" <br>
              Los módulos de alto nivel no deberían depender de módulos de bajo nivel. Ambos deberían depender de abstracciones.<br>
              Las abstracciones no deberían depender de los detalles. Los detalles deberían depender de las abstracciones.<br>
              El objetivo del (DIP) consiste en reducir las dependencias entre los módulos del código,
              es decir, alcanzar un bajo acoplamiento de las clases.</p>
            <div class="col-md-8">
              <img src="img/dependencia.png" class="card-img" alt="...">
            </div>
          </div>
        </div>
      </div>
    </div>

  </div>